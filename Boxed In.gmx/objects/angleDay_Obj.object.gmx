<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Angle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>541</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sprite_set</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>5</kind>
            <sprite>Angle</sprite>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Step1 = 0;
Heal = 3;
Step2 = 0;
Speed = 2;
SpeedHold = Speed;
Index1 = 7;
Index2 = 0;
Collide = 0;
Horz = 0;
Vert = 0;
Side = 0; // 0 = top, 1 equals right, 2 equals left
xkey = 0; // 0 nothing -1 left 1 right
ykey = 0; // 0 nothing -1 down 1 up
movetime = 15;
stoptime = irandom(75);
sg = 0;
countM = 0;
up = 0;
down = 0;
left = 0;
right = 0;
Hit1 = 0;
Hit2 = 0;
HitC = 0;
HitIndex = 30;
if(image_angle == 0)
{
    Side = 0;
}
if(image_angle == 270)
{
    Side = 1;
}
if(image_angle == 90)
{
    Side = 2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.Night == 0 &amp;&amp; sprite_index == NoBeams)
{
    sprite_index = Angle;
    image_index = 0;
    image_speed = 0;
}
if(global.Night == 1 &amp;&amp; sprite_index == Angle)
{
    sprite_index = NoBeams;
    image_index = 0;
    image_speed = 0;
    vspeed = 0;
    hspeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = scr_depth(x, y, image_angle, 21);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.Night == 0 &amp;&amp; global.Swing == 1)
{
    if(abs(Guy_Obj.x - x) &lt; 50 &amp;&amp; abs(Guy_Obj.y - y) &lt; 50 &amp;&amp; Hit1 == 0)
    {
        Heal = Heal - 1;
        Hit1 = 1;
        Hit2 = 1;
        HitC = 0;
    }
}

if(Guy_Obj.x &gt; x &amp;&amp; Hit1 == 1)
{
    xkey = -1;
}
if(Guy_Obj.x &lt; x &amp;&amp; Hit1 == 1)
{
    xkey = 1;
}
if(Guy_Obj.y &gt; y &amp;&amp; Hit1 == 1)
{
    ykey = 1;
}
if(Guy_Obj.y &lt; y &amp;&amp; Hit1 == 1)
{
    ykey = -1;
}

if(Hit2 == 1)
{
    if(HitC &lt; HitIndex &amp;&amp; Hit1 = 1)
    {
        Speed = SpeedHold * ((HitIndex - HitC)/HitIndex);
        HitC++;
    }
    if(Hit1 == 1 &amp;&amp; Hit2 == 1 &amp;&amp; HitC &gt;= HitIndex)
    {
        Hit1 = 0;
        HitC = 1;
    }
    if(HitC &lt; HitIndex &amp;&amp; Hit1 = 1)
    {
        Speed = SpeedHold * (HitC/HitIndex);
        HitC++;
    }
    if(Hit1 == 0 &amp;&amp; Hit2 == 1 &amp;&amp; HitC &gt;= HitIndex)
    {
        Hit1 = 0;
        HitC = 0;
        Hit2 = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(Hit1 == 0)
{
if(abs(Guy_Obj.x - x) &lt; 200 &amp;&amp; abs(Guy_Obj.y - y) &lt; 200)
{
if(countM &gt;= movetime)
{
    if(Guy_Obj.y &gt; y)
    {
        ykey = -1;
    }
    if(Guy_Obj.y &lt; y)
    {
        ykey = 1;
    }
    if(Guy_Obj.y = y)
    {
        ykey = 0;
    }
    
    if(Guy_Obj.x &gt; x)
    {
        xkey = 1;
    }
    if(Guy_Obj.x &lt; x)
    {
        xkey = -1;
    }
    if(Guy_Obj.x = x)
    {
        xkey = 0;
    }
    countM = 0;
}
else
{
    countM++;
}
}
else
{
    if(countM &gt;= stoptime &amp;&amp; sg == 0)
    {
        var rand = irandom(7);
        switch(rand)
        {
            case 0:
            xkey = -1;
            ykey = -1;
            break;
            case 1:
            xkey = 1;
            ykey = 0;
            break;
            case 2:
            xkey = -1;
            ykey = 0;
            break;
            case 3:
            xkey = 0;
            ykey = 1;
            break;
            case 4:
            xkey = 0;
            ykey = -1;
            break;
            case 5:
            xkey = 1;
            ykey = 1;
            break;
            case 6:
            xkey = 1;
            ykey = -1;
            break;
            case 7:
            xkey = -1;
            ykey = 1;
            break;
        }
        countM = 0;
        stoptime = irandom(60)+20;
        sg = 1;
    }
    else
    {
        if(countM &gt;= stoptime &amp;&amp; sg == 1)
        {
            xkey = 0;
            ykey = 0;
            countM = 0;
            stoptime = irandom(60)+20;
            sg = 0;
        }
    }
    countM++;
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Movement

if(xkey == -1 &amp;&amp; right == 0)
{
    Horz = -1;
    if(Vert == 0 &amp;&amp; Side == 0)
    {
        image_index = 13;
        Index2 = 2;
        Step1 = 0;
    }
    else
    {
        switch(Side)
        {
            case 1:
            image_index = 1;
            Index2 = 2;
            Step1 = 0;
            break;
            case 2:
            image_index = 5;
            Index2 = 2;
            Step1 = 0;
            break;
        }
    }
    right = 1;
}
if(xkey == 0)
{
    if(Horz &lt; 0)
    {
        Horz = 0;
        Step2 = 2;
    }
    right = 0;
}

// D

if(xkey == 1 &amp;&amp; left == 0)
{
    Horz = 1;
    if(Vert == 0 &amp;&amp; Side == 0)
    {
        image_index = 9;
        Index2 = 2;
        Step1 = 0;
    }
    else
    {
        switch(Side)
        {
            case 1:
            image_index = 5;
            Index2 = 2;
            Step1 = 0;
            break;
            case 2:
            image_index = 1;
            Index2 = 2;
            Step1 = 0;
            break;
        }
    }
    left = 1;
}
if(xkey == 0)
{
    if(Horz &gt; 0)
    {
        Horz = 0;
        Step2 = 3;
    }
    left = 0;
}

// W

if(ykey == 1 &amp;&amp; up == 0)
{
    Vert = 1;
    switch(Side)
    {
        case 0:
        image_index = 5;
        Index2 = 2;
        Step1 = 0;
        break;
        
        case 1:
        if(Horz == 0)
        {
            image_index = 13;
            Index2 = 2;
            Step1 = 0;
        }
        break;
        
        case 2:
        if(Horz == 0)
        {
            image_index = 9;
            Index2 = 2;
            Step1 = 0;
        }
        break;
    }
    up = 1;
}
if(ykey == 0)
{
    if(Vert &gt; 0)
    {
        Vert = 0;
        Step2 = 0;
    }
    up = 0;
}

// S

if(ykey == -1 &amp;&amp; down == 0)
{
    Vert = -1;
    switch(Side)
    {
        case 0:
        image_index = 1;
        Index2 = 2;
        Step1 = 0;
        break;
        
        case 1:
        if(Horz == 0)
        {
            image_index = 9;
            Index2 = 2;
            Step1 = 0;
        }
        break;
        
        case 2:
        if(Horz == 0)
        {
            image_index = 13;
            Index2 = 2;
            Step1 = 0;
        }
        break;
    }
    down = 1;
}
if(ykey == 0)
{
    if(Vert &lt; 0)
    {
        Vert = 0;
        Step2 = 1;
    }
    down = 0;
}

if(ykey == 1)
{
    down = 0;
}
else
{
    if(ykey == -1)
    {
        up = 0;
    }
}

if(xkey == 1)
{
    right = 0;
}
else
{
    if(xkey == -1)
    {
        left = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Sprite handle
if(Horz == 0 &amp;&amp; Vert == 0)
{
    if(Step2 == 0) // W
    {
        switch(Side)
        {
            case 0:
            image_index = 4;
            break;
            
            case 1:
            image_index = 12;
            break;
            
            case 2:
            image_index = 8;
            break;
        }
    }
    if(Step2 == 1)  // S
    {
        switch(Side)
        {
            case 0:
            image_index = 0;
            break;
            
            case 1:
            image_index = 8;
            break;
            
            case 2:
            image_index = 12;
            break;
        }
    }
    if(Step2 == 2) // A
    {
        switch(Side)
        {
            case 0:
            image_index = 12;
            break;
            
            case 1:
            image_index = 0;
            break;
            
            case 2:
            image_index = 4;
            break;
        }
    }
    if(Step2 == 3) // D
    {
        switch(Side)
        {
            case 0:
            image_index = 8;
            break;
            
            case 1:
            image_index = 4;
            break;
            
            case 2:
            image_index = 0;
            break;
        }
    }
}
else
{
    if(Side == 0) // Begin top
    {
        if(Horz != 0 &amp;&amp; Vert == 0)
        {
            switch (Horz){
                case 1: // D Top
                Step1++;
                if (Step1 &gt;= Index1)
                {
                    if(Index2 &lt; 4)
                    {
                        image_index = Index2 + 8;
                        Index2++;
                    }
                    else
                    {
                        Index2 = 1;
                        image_index = Index2 + 7;
                    }
                    Step1 = 0;
                }
                break;
                
                case -1: // A top
                Step1++;
                if (Step1 &gt;= Index1)
                {
                    if(Index2 &lt; 4)
                    {
                        image_index = Index2 + 12;
                        Index2++;
                    }
                    else
                    {
                        Index2 = 1;
                        image_index = Index2 + 11;
                    }
                    Step1 = 0;
                }
                break;
            }
        }
        else
        {
            switch (Vert){
                case 1: // W Top
                Step1++;
                if (Step1 &gt;= Index1)
                {
                    if(Index2 &lt; 4)
                    {
                        image_index = Index2 + 4;
                        Index2++;
                    }
                    else
                    {
                        Index2 = 1;
                        image_index = Index2 + 3;
                    }
                    Step1 = 0;
                }
                break;
                
                case -1: // S Top
                Step1++;
                if (Step1 &gt;= Index1)
                {
                    if(Index2 &lt; 4)
                    {
                        image_index = Index2;
                        Index2++;
                    }
                    else
                    {
                        Index2 = 1;
                        image_index = Index2 - 1;
                    }
                    Step1 = 0;
                }
                break;
            }
        }
    }
    else // begin sides
    {
        if(Vert != 0 &amp;&amp; Horz == 0)
        {
            switch (Vert){
                case 1: // W side
                Step1++;
                if (Step1 &gt;= Index1)
                {
                    if(Index2 &lt; 4)
                    {
                        if(Side == 1)
                        {
                            image_index = Index2 + 12;
                        }
                        else
                        {
                            image_index = Index2 + 8;
                        }
                        Index2++;
                    }
                    else
                    {
                        Index2 = 1;
                        if(Side == 1)
                        {
                            image_index = Index2 + 11;
                        }
                        else
                        {
                            image_index = Index2 + 7;
                        }
                    }
                    Step1 = 0;
                }
                break;
                
                case -1: // S side
                Step1++;
                if (Step1 &gt;= Index1)
                {
                    if(Index2 &lt; 4)
                    {
                        if(Side == 1)
                        {
                            image_index = Index2 + 8;
                        }
                        else
                        {
                            image_index = Index2 + 12;
                        }
                        Index2++;
                    }
                    else
                    {
                        Index2 = 1;
                        if(Side == 1)
                        {
                            image_index = Index2 + 7;
                        }
                        else
                        {
                            image_index = Index2 + 11;
                        }
                    }
                    Step1 = 0;
                }
                break;
            }
        }
        else
        {
            switch (Horz){
                case 1: // D side
                Step1++;
                if (Step1 &gt;= Index1)
                {
                    if(Index2 &lt; 4)
                    {
                    if(Side == 1)
                        {
                            image_index = Index2 + 4;
                        }
                        else
                        {
                            image_index = Index2 + 0;
                        }
                        Index2++;
                    }
                    else
                    {
                        Index2 = 1;
                        if(Side == 1)
                        {
                            image_index = Index2 + 3;
                        }
                        else
                        {
                            image_index = Index2 - 1;
                        }
                    }
                    Step1 = 0;
                }
                break;
                
                case -1: // A side
                Step1++;
                if (Step1 &gt;= Index1)
                {
                    if(Index2 &lt; 4)
                    {
                        if(Side == 1)
                        {
                            image_index = Index2 + 0;
                        }
                        else
                        {
                            image_index = Index2 + 4;
                        }
                        Index2++;
                    }
                    else
                    {
                        Index2 = 1;
                        if(Side == 1)
                        {
                            image_index = Index2 - 1;
                        }
                        else
                        {
                            image_index = Index2 + 3;
                        }
                    }
                    Step1 = 0;
                }
                break;
            }
        }
    }
}

switch(Side)
{
    case 0:
    image_angle = 0;
    break;
    
    case 1:
    image_angle = 270;
    break;
    
    case 2:
    image_angle = 90;
    break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Movement handle
if(global.Night == 0)
{
if(Horz &gt; 0 &amp;&amp; hspeed != Speed)
{
    hspeed = Speed;
}
else
{
    if(Horz &lt; 0 &amp;&amp; hspeed != -Speed)
    {
        hspeed = -Speed;
    }
}

if(Vert &gt; 0 &amp;&amp; vspeed != -Speed)
{
    vspeed = -Speed;
}
else
{
    if(Vert &lt; 0 &amp;&amp; vspeed != Speed)
    {
        vspeed = Speed;
    }
}

if(Horz == 0)
{
    hspeed = 0;
}

if(Vert == 0)
{
    vspeed = 0;
}
}
else
{
    vspeed = 0;
    hspeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Left_Obj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(Side != 2)
{
    Side = 2;
    Step1 = Index1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Right_Obj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(Side != 1)
{
    Side = 1;
    Step1 = Index1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Top_Obj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(Side != 0)
{
    Side = 0;
    Step1 = Index1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Wall_Obj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Guy_Obj">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
